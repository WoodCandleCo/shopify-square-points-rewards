{% comment %}
  Auto-injecting Loyalty Program Widget for Cart Page/Drawer
  Automatically appears in cart summary before special instructions
{% endcomment %}

<script>
// Auto-inject loyalty widget into cart summary
document.addEventListener('DOMContentLoaded', function() {
  console.log('Loyalty widget script loaded');
  
  // Try multiple selectors to find cart container
  const selectors = [
    '.cart-actions',
    '.cart__summary-totals .cart-actions',
    '.cart__footer', 
    '.cart-footer',
    '.cart__totals',
    '.cart-totals',
    '.cart__summary',
    '[data-cart-summary]',
    '.cart',
    '.cart-drawer',
    '.cart-drawer__content',
    '.drawer__content',
    '[data-cart-drawer]',
    '.mini-cart',
    '.cart-items'
  ];
  
  let cartContainer = null;
  for (const selector of selectors) {
    const element = document.querySelector(selector);
    console.log(`Checking selector: ${selector}`, element);
    if (element) {
      cartContainer = element;
      console.log(`Found cart container with: ${selector}`);
      break;
    }
  }
  
  if (cartContainer) {
    // Create the loyalty widget
    const loyaltyWidget = document.createElement('div');
    loyaltyWidget.id = 'loyalty-widget';
    loyaltyWidget.className = 'loyalty-widget';
    
    // Insert at the beginning of the cart container
    cartContainer.insertBefore(loyaltyWidget, cartContainer.firstChild);
    console.log('Loyalty widget inserted into cart');
    
    // Initialize the widget content after a short delay
    setTimeout(() => {
      initializeLoyaltyWidget();
    }, 100);
  } else {
    console.error('No cart container found for loyalty widget');
    console.log('Available elements:', document.querySelectorAll('*[class*="cart"]'));
  }
});
</script>
<style>
    .loyalty-widget {
      background: var(--color-background, #ffffff);
      border-radius: 8px;
      padding: 16px;
      margin: 16px 0;
      border: 1px solid var(--color-border, #e9ecef);
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .loyalty-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
      margin-bottom: 12px;
    }
    .loyalty-content {
      display: none;
    }
    .loyalty-content.expanded {
      display: block;
    }
    .loyalty-balance {
      font-weight: 600;
      color: #28a745;
    }
    .loyalty-rewards {
      margin-top: 12px;
    }
    .reward-item {
      background: white;
      border: 1px solid #dee2e6;
      border-radius: 6px;
      padding: 12px;
      margin-bottom: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .reward-button {
      background: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 6px 12px;
      cursor: pointer;
      font-size: 14px;
    }
    .reward-button:hover {
      background: #0056b3;
    }
    .phone-input {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid #ced4da;
      border-radius: 4px;
      margin-bottom: 8px;
    }
    .connect-button {
      width: 100%;
      background: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 10px;
      cursor: pointer;
    }
</style>

<template id="loyalty-widget-template">
  <div class="loyalty-header" onclick="toggleLoyalty()">
    <span>üéÅ Loyalty Rewards</span>
    <span id="loyalty-toggle">+</span>
  </div>

  <div id="loyalty-content" class="loyalty-content">
    <div id="loyalty-loading" style="display: none;">
      Loading loyalty account...
    </div>

    <div id="loyalty-login" style="display: block;">
      <p style="margin-bottom: 8px; color: #6c757d; font-size: 14px;">
        Enter your phone number to access rewards
      </p>
      <input 
        type="tel" 
        id="phone-input" 
        class="phone-input" 
        placeholder="+1 (555) 123-4567"
      >
      <button class="connect-button" onclick="connectLoyalty()">
        Connect Loyalty Account
      </button>
    </div>

    <div id="loyalty-account" style="display: none;">
      <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; margin-bottom: 12px;">
        <div>
          <p style="font-size: 12px; color: #6c757d; margin: 0;">Current Balance</p>
          <p id="current-balance" class="loyalty-balance" style="margin: 0;">0 points</p>
        </div>
        <div>
          <p style="font-size: 12px; color: #6c757d; margin: 0;">Lifetime Points</p>
          <p id="lifetime-points" style="margin: 0; font-weight: 600;">0 points</p>
        </div>
      </div>

      <div id="available-rewards" class="loyalty-rewards">
        <!-- Rewards will be populated here -->
      </div>
    </div>
  </div>
</template>

<script>
  let loyaltyExpanded = false;
  let loyaltyAccount = null;
  let availableRewards = [];
  
  function initializeLoyaltyWidget() {
    const widget = document.getElementById('loyalty-widget');
    if (!widget) return;
    
    // Set the widget HTML content
    const tpl = document.getElementById('loyalty-widget-template');
    if (tpl) {
      widget.innerHTML = tpl.innerHTML;
    }
  }

  function toggleLoyalty() {
    const content = document.getElementById('loyalty-content');
    const toggle = document.getElementById('loyalty-toggle');
    
    loyaltyExpanded = !loyaltyExpanded;
    
    if (loyaltyExpanded) {
      content.classList.add('expanded');
      toggle.textContent = '‚àí';
      
      // Load customer loyalty data if not already loaded
      if (!loyaltyAccount) {
        loadCustomerLoyalty();
      }
    } else {
      content.classList.remove('expanded');
      toggle.textContent = '+';
    }
  }

  async function loadCustomerLoyalty() {
    const customerId = {{ customer.id | json }};
    const customerEmail = {{ customer.email | json }};
    
    if (!customerId && !customerEmail) return;

    showLoading(true);

    try {
      const response = await fetch('https://{{ block.settings.square_app_id }}.lovableproject.com/api/loyalty/account', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          customer_id: customerId,
          email: customerEmail
        })
      });

      const data = await response.json();
      
      if (data.loyalty_account) {
        loyaltyAccount = data.loyalty_account;
        availableRewards = data.available_rewards || [];
        showLoyaltyAccount();
      } else {
        showLoyaltyLogin();
      }
    } catch (error) {
      console.error('Error loading loyalty account:', error);
      showLoyaltyLogin();
    }

    showLoading(false);
  }

  async function connectLoyalty() {
    const phoneNumber = document.getElementById('phone-input').value;
    
    if (!phoneNumber) {
      alert('Please enter your phone number');
      return;
    }

    showLoading(true);

    try {
      const response = await fetch('https://{{ block.settings.square_app_id }}.lovableproject.com/api/loyalty/lookup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone: phoneNumber
        })
      });

      const data = await response.json();
      
      if (data.loyalty_account) {
        loyaltyAccount = data.loyalty_account;
        availableRewards = data.available_rewards || [];
        showLoyaltyAccount();
      } else {
        alert('No loyalty account found for this phone number');
      }
    } catch (error) {
      console.error('Error connecting loyalty account:', error);
      alert('Error connecting to loyalty account');
    }

    showLoading(false);
  }

  async function redeemReward(rewardId, pointsRequired, discountValue) {
    if (!loyaltyAccount || loyaltyAccount.balance < pointsRequired) {
      alert('Insufficient points for this reward');
      return;
    }

    try {
      const response = await fetch('https://{{ block.settings.square_app_id }}.lovableproject.com/api/loyalty/redeem', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          loyalty_account_id: loyaltyAccount.id,
          reward_id: rewardId,
          points_to_redeem: pointsRequired
        })
      });

      const data = await response.json();
      
      if (data.success && data.discount_code) {
        // Apply discount code to cart
        applyDiscountCode(data.discount_code);
        
        // Update loyalty balance
        loyaltyAccount.balance = data.new_balance;
        updateLoyaltyDisplay();
        
        // Show appropriate success message based on discount type
        const reward = availableRewards.find(r => r.id === rewardId);
        let message = 'Reward redeemed! ';
        
        if (reward && reward.name.toLowerCase().includes('free ')) {
          // For free items, provide specific instructions
          const itemName = reward.name.replace('Free ', '').toLowerCase();
          message += `Your discount code (${data.discount_code}) has been applied. `;
          message += `Please add the ${itemName} to your cart to see the discount. `;
          message += `This discount is limited to prevent abuse.`;
        } else if (reward && reward.discount_type === 'PERCENTAGE' && reward.max_discount_amount) {
          message += `Your ${reward.discount_amount}% discount (up to $${(reward.max_discount_amount / 100).toFixed(2)}) has been applied to your cart.`;
        } else {
          message += `Your discount (${data.discount_code}) has been applied to your cart.`;
        }
        
        alert(message);
      } else {
        alert('Error redeeming reward: ' + (data.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error redeeming reward:', error);
      alert('Error redeeming reward');
    }
  }

  function applyDiscountCode(discountCode) {
    // Apply discount code to Shopify cart
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/discount/' + discountCode;
    document.body.appendChild(form);
    form.submit();
  }

  function showLoading(show) {
    document.getElementById('loyalty-loading').style.display = show ? 'block' : 'none';
    document.getElementById('loyalty-login').style.display = show ? 'none' : (!loyaltyAccount ? 'block' : 'none');
    document.getElementById('loyalty-account').style.display = show ? 'none' : (loyaltyAccount ? 'block' : 'none');
  }

  function showLoyaltyLogin() {
    document.getElementById('loyalty-login').style.display = 'block';
    document.getElementById('loyalty-account').style.display = 'none';
  }

  function showLoyaltyAccount() {
    document.getElementById('loyalty-login').style.display = 'none';
    document.getElementById('loyalty-account').style.display = 'block';
    updateLoyaltyDisplay();
  }

  function updateLoyaltyDisplay() {
    document.getElementById('current-balance').textContent = loyaltyAccount.balance + ' points';
    document.getElementById('lifetime-points').textContent = loyaltyAccount.lifetime_points + ' points';
    
    const rewardsContainer = document.getElementById('available-rewards');
    rewardsContainer.innerHTML = '';
    
    if (availableRewards.length === 0) {
      rewardsContainer.innerHTML = '<p style="color: #6c757d; font-size: 14px;">No rewards available</p>';
      return;
    }

    availableRewards.forEach(reward => {
      const rewardDiv = document.createElement('div');
      rewardDiv.className = 'reward-item';
      
      // Create more descriptive reward description
      let description = reward.name;
      if (reward.discount_type === 'PERCENTAGE' && reward.max_discount_amount) {
        description += ` (up to $${(reward.max_discount_amount / 100).toFixed(2)})`;
      } else if (reward.discount_type === 'FIXED_AMOUNT') {
        description += ` ($${(reward.discount_amount / 100).toFixed(2)} off)`;
      }
      
      const left = document.createElement('div');
      const title = document.createElement('p');
      title.style.margin = '0';
      title.style.fontWeight = '500';
      title.textContent = description;
      const pts = document.createElement('p');
      pts.style.margin = '0';
      pts.style.fontSize = '12px';
      pts.style.color = '#6c757d';
      pts.textContent = reward.points_required + ' points';
      left.appendChild(title);
      left.appendChild(pts);
      const btn = document.createElement('button');
      btn.className = 'reward-button';
      btn.textContent = 'Redeem';
      btn.addEventListener('click', () => redeemReward(reward.id, reward.points_required));
      rewardDiv.appendChild(left);
      rewardDiv.appendChild(btn);
      rewardsContainer.appendChild(rewardDiv);
    });
  }
</script>

{% schema %}
{
  "name": "Loyalty Program Widget",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "square_app_id",
      "label": "Lovable Project Domain",
      "default": "shopify-square-points-rewards"
    }
  ]
}
{% endschema %}